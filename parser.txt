%{
#include "token.h"
#include <stdio.h>
#include <stdlib.h>

// Declaración de la función yylex generada por Flex
int yylex(void);

// Función para manejar errores
void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}
%}

// Declaración de los tokens
%token TOKEN_LINEBREAK
%token TOKEN_TAB
%token TOKEN_ASSIGN
%token TOKEN_IF
%token TOKEN_ELSE
%token TOKEN_FOR
%token TOKEN_WHILE
%token TOKEN_FUNC_DEF
%token TOKEN_RETURN
%token TOKEN_ARROW
%token TOKEN_COMPARE
%token TOKEN_DIFFERENT
%token TOKEN_LESS
%token TOKEN_GREATER
%token TOKEN_LESS_EQUAL
%token TOKEN_GREATER_EQUAL
%token TOKEN_LPAREN
%token TOKEN_RPAREN
%token TOKEN_BICOND
%token TOKEN_COMMA
%token TOKEN_AND
%token TOKEN_OR
%token TOKEN_NOT
%token TOKEN_TYPE
%token TOKEN_IDENTIFIER
%token TOKEN_STRING
%token TOKEN_PLUS
%token TOKEN_MINUS
%token TOKEN_MULTIPLY
%token TOKEN_DIVIDE
%token TOKEN_NUMBER

// Precedencia y asociatividad de operadores
%left TOKEN_PLUS TOKEN_MINUS
%left TOKEN_MULTIPLY TOKEN_DIVIDE
%right TOKEN_ASSIGN

// Inicio de la gramática
%%

// Reglas gramaticales
program:
    | program statement
    ;

statement:
      expression TOKEN_LINEBREAK
    | TOKEN_IF expression TOKEN_LINEBREAK statement
    | TOKEN_IF expression TOKEN_LINEBREAK statement TOKEN_ELSE TOKEN_LINEBREAK statement
    | TOKEN_FOR expression TOKEN_LINEBREAK statement
    | TOKEN_WHILE expression TOKEN_LINEBREAK statement
    | TOKEN_FUNC_DEF TOKEN_IDENTIFIER TOKEN_LPAREN parameters TOKEN_RPAREN TOKEN_ARROW expression TOKEN_LINEBREAK
    | TOKEN_RETURN expression TOKEN_LINEBREAK
    ;

expression:
      TOKEN_NUMBER
    | TOKEN_STRING
    | TOKEN_IDENTIFIER
    | TOKEN_IDENTIFIER TOKEN_ASSIGN expression
    | expression TOKEN_PLUS expression
    | expression TOKEN_MINUS expression
    | expression TOKEN_MULTIPLY expression
    | expression TOKEN_DIVIDE expression
    | expression TOKEN_COMPARE expression
    | expression TOKEN_DIFFERENT expression
    | expression TOKEN_LESS expression
    | expression TOKEN_GREATER expression
    | expression TOKEN_LESS_EQUAL expression
    | expression TOKEN_GREATER_EQUAL expression
    | TOKEN_LPAREN expression TOKEN_RPAREN
    | TOKEN_NOT expression
    | expression TOKEN_AND expression
    | expression TOKEN_OR expression
    ;

parameters:
    | parameter
    | parameters TOKEN_COMMA parameter
    ;

parameter:
      TOKEN_IDENTIFIER
    | TOKEN_TYPE TOKEN_IDENTIFIER
    ;

%%

int main(int argc, char **argv) {
    yyparse();
    return 0;
}